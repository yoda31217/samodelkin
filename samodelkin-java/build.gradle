plugins {
    id 'java-library'
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'maven-publish'
    id 'signing'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

def artifactId = 'samodelkin-java'
group = 'io.github.yoda31217'
version = new Date().format('yyyyMMdd.HHmmss')

publishing {
    repositories {
        maven {
            // https://issues.sonatype.org/browse/OSSRH-87602
            // https://s01.oss.sonatype.org/#stagingRepositories
            name = "MavenCentral"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv('SONATYPE_USER')
                password = System.getenv('SONATYPE_PASSWORD')
            }
        }
    }
    publications {
        samodelkinJava(MavenPublication) {
            artifactId = artifactId

            from(components.java)

            pom {
                name = 'Samodelkin Java Library'
                description = 'Small Java utility library from yoda31217'
                url = 'https://github.com/yoda31217/samodelkin'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'yoda31217'
                        name = 'Jason Bourne'
                        email = 'jbourne.nik@gmail.com'
                    }
                }
                scm {
                    connection = 'git@github.com:yoda31217/samodelkin.git'
                    developerConnection = 'git@github.com:yoda31217/samodelkin.git'
                    url = 'https://github.com/yoda31217/samodelkin'
                }
            }
        }
    }
}

signing {
    def signingGpgSecretKey = System.getenv('SIGNING_GPG_SECRET_KEY')
    def signingGpgPassphrase = System.getenv('SIGNING_GPG_PASSPHRASE')
    useInMemoryPgpKeys(signingGpgSecretKey, signingGpgPassphrase)
    sign publishing.publications.samodelkinJava
}

dependencies {
    compileOnly 'org.apache.commons:commons-math3:3.6.1'
    compileOnly 'com.google.guava:guava:31.1-jre'

    testImplementation 'org.apache.commons:commons-math3:3.6.1'
    testImplementation 'com.google.guava:guava:31.1-jre'

    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
}

tasks.named('test') {
    useJUnitPlatform()
    testlogger {
        theme 'plain'
        showExceptions true
        showStackTraces true
        showFullStackTraces true
        showCauses true
        slowThreshold 0
        showSummary true
        showSimpleNames false
        showPassed true
        showSkipped true
        showFailed true
        showOnlySlow false
        showStandardStreams false
        showPassedStandardStreams false
        showSkippedStandardStreams false
        showFailedStandardStreams false
        // logLevel 'lifecycle'
    }
}

tasks.publish.doLast {
    println "Published as ${project.group}:${artifactId}:${project.version} to https://s01.oss.sonatype.org"
}